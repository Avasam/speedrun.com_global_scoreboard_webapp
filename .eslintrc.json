{
  "plugins": [
    "react-hooks",
    // "jsx-a11y",
    "switch-case",
    "prefer-arrow",
    "simple-import-sort",
    "extra-rules"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/all",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    // "plugin:jsx-a11y/strict",
    // "react-app/jest",
    "plugin:sonarjs/recommended",
    "plugin:switch-case/recommended",
    "plugin:unicorn/recommended"
  ],
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
      "typescript": {}
    }
  },
  "overrides": [
    {
      "files": [
        "*.js",
        "*.test.tsx",
        "environment.*",
        "*.d.ts"
      ],
      "env": {
        "browser": false,
        "node": true,
        "jest": true
      },
      "rules": {
        "@typescript-eslint/consistent-type-definitions": "off",
        "unicorn/filename-case": "off"
      }
    },
    {
      "files": [
        "serviceWorker.ts"
      ],
      "rules": {
        "unicorn/filename-case": "off"
      }
    }
  ],
  "rules": {
    // react overrides
    "react/jsx-uses-react": "off",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    // sonarjs/recommended overrides (https://github.com/SonarSource/eslint-plugin-sonarjs/blob/master/src/index.ts)
    // This rule does not correctly treat react's function components. See https://github.com/SonarSource/SonarJS/issues/2238
    // Also react-app service workers template are at 22
    // Set back to error with appropriate number if ever fixed
    "sonarjs/cognitive-complexity": [
      "warn",
      64
    ],
    // unicorn/recommended overrides (https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/index.js#L41)
    "unicorn/catch-error-name": [
      "error",
      {
        "ignore": [
          "^(err(ors)?|_)$"
        ]
      }
    ],
    "unicorn/consistent-function-scoping": "error",
    "unicorn/custom-error-definition": "error",
    "unicorn/empty-brace-spaces": "off",
    "unicorn/filename-case": [
      "error",
      {
        "case": "pascalCase"
      }
    ],
    "unicorn/no-array-reduce": "warn",
    "unicorn/no-keyword-prefix": [
      "error",
      {
        "disallowedPrefixes": [
          "class",
          "for",
          "of"
        ]
      }
    ],
    "unicorn/no-nested-ternary": "off",
    "unicorn/no-null": "off",
    "unicorn/no-unsafe-regex": "warn",
    "unicorn/no-unused-properties": "error",
    "unicorn/no-useless-undefined": [
      "error",
      {
        "checkArguments": false
      }
    ],
    "unicorn/numeric-separators-style": "error",
    "unicorn/prefer-add-event-listener": "error",
    "unicorn/prefer-object-has-own": "error",
    "unicorn/prefer-query-selector": 0,
    "unicorn/prefer-text-content": "error",
    "unicorn/prevent-abbreviations": [
      "error",
      {
        "checkDefaultAndNamespaceImports": false,
        "checkShorthandImports": false,
        "allowList": {
          "fn": true,
          "args": true,
          // environment config
          "env": true,
          // speedrun.com
          "src": true,
          "Src": true,
          "SRC": true,
          // fetch
          "err": true,
          "res": true,
          // Query/URL params
          "params": true,
          "Params": true,
          "param": true,
          "Param": true,
          // React props
          "props": true,
          "Props": true,
          "ref": true,
          "Ref": true
        }
      }
    ],
    // Bahmutov's extra-rules
    "extra-rules/no-commented-out-code": "warn",
    "extra-rules/potential-point-free": "error",
    // Simple import rules
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Side effect imports.
          [
            "^\\u0000"
          ],
          // Packages.
          // Things that start with a letter (or digit or underscore), or `@` followed by a letter.
          [
            "^@?\\w"
          ],
          // Absolute imports and other imports such as Vue-style `@/foo`.
          // Anything not matched in another group.
          [
            "^"
          ],
          // Relative imports.
          // Anything that starts with a dot or src/
          [
            "^(\\.|src/)"
          ]
        ]
      }
    ],
    "simple-import-sort/exports": "error",
    // Prefer Arrow rule
    "prefer-arrow/prefer-arrow-functions": [
      "error",
      {
        "disallowPrototype": true,
        "singleReturnOnly": true,
        "classPropertiesAllowed": true,
        "allowStandaloneDeclarations": false
      }
    ],
    // Custom rules and @typescript-eslint/all overrides (https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/all.ts)
    // Automatically deactivates ESLint rules (configured below) that are taken care of by TypeScript (https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/eslint-recommended.ts)
    "@typescript-eslint/comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "always-multiline",
        "functions": "only-multiline",
        "enums": "always-multiline"
      }
    ],
    "@typescript-eslint/consistent-type-definitions": [
      "error",
      "type"
    ],
    // explicit types rules complicates things uselessly
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "no-public"
      }
    ],
    // Doesn't work great, see: https://github.com/typescript-eslint/typescript-eslint/issues/1824
    "@typescript-eslint/indent": "off",
    // Doesn't allow `let myVar: Type | undefined`
    "@typescript-eslint/init-declarations": "off",
    "@typescript-eslint/lines-between-class-members": "off",
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "none"
        },
        "singleline": {
          "delimiter": "comma"
        }
      }
    ],
    // Doesn't work well with Function Components. Maybe could be configured?
    "@typescript-eslint/naming-convention": "off",
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": true
      }
    ],
    "@typescript-eslint/no-extra-parens": [
      "error",
      "all",
      {
        "nestedBinaryExpressions": false
      }
    ],
    "@typescript-eslint/no-magic-numbers": [
      "error",
      {
        "enforceConst": true,
        // Note: detectObjects catches a few too many false-negative. Still good to check once in a while
        // "detectObjects": true,
        "ignore": [
          -1,
          0,
          1,
          2
        ],
        "ignoreArrayIndexes": true,
        "ignoreEnums": true,
        "ignoreNumericLiteralTypes": true,
        "ignoreReadonlyClassProperties": true
      }
    ],
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    "@typescript-eslint/no-type-alias": "off",
    // Note: These 2 drown TS2304 and actually make the errors harder to understand.
    // See: https://github.com/typescript-eslint/typescript-eslint/issues/2665
    // There's nothing we can do until a pedantic any check in TypeScript is added
    // Eg.: https://github.com/microsoft/TypeScript/issues/40174
    // Which is likely never gonna happen: https://github.com/microsoft/TypeScript/issues/24737
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    // TODO: Would accept this if it had autofixes, otherwise this is too tedious to use. Check again later
    "@typescript-eslint/prefer-readonly-parameter-types": "off",
    "@typescript-eslint/promise-function-async": [
      "error",
      {
        "checkArrowFunctions": false
      }
    ],
    "@typescript-eslint/object-curly-spacing": [
      "error",
      "always"
    ],
    "@typescript-eslint/quotes": [
      "error",
      "single"
    ],
    "@typescript-eslint/semi": [
      "error",
      "never"
    ],
    "@typescript-eslint/space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "never"
      }
    ],
    "@typescript-eslint/space-infix-ops": [
      "error",
      {
        "int32Hint": true
      }
    ],
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      {
        "allowBoolean": true,
        "allowNullish": true
      }
    ],
    // TODO: Check later if some "no-unnecessary-type-annotation" has been implemented
    // see https://github.com/typescript-eslint/typescript-eslint/issues/295
    // Custom rules and eslint:recommended overrides (https://eslint.org/docs/rules/)
    "accessor-pairs": [
      "error",
      {
        "enforceForClassMembers": true
      }
    ],
    "array-callback-return": "error",
    "block-scoped-var": "error",
    "complexity": "error",
    "default-case": "error",
    "dot-location": [
      "error",
      "property"
    ],
    "eqeqeq": [
      "error",
      "smart"
    ],
    "func-name-matching": "error",
    "func-names": [
      "error",
      "never"
    ],
    "function-paren-newline": [
      "error",
      "consistent"
    ],
    "grouped-accessor-pairs": [
      "error",
      "getBeforeSet"
    ],
    "id-length": [
      "error",
      {
        "min": 3,
        "max": 32,
        "exceptions": [
          "id",
          "fn",
          "fs",
          // Unused result
          "_",
          "__",
          // Iterations
          "i",
          "j",
          "k",
          // Comparison
          "a",
          "b",
          "x",
          // Date formats
          "dd",
          "mm",
          "yy"
        ]
      }
    ],
    // As mentionned above, the typescrpt version doesn't work great
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1
      }
    ],
    "jsx-quotes": [
      "error",
      "prefer-single"
    ],
    "max-len": [
      "error",
      {
        "code": 120,
        "tabWidth": 2,
        "ignoreComments": false,
        "ignorePattern": "^import .*?$"
      }
    ],
    // These rule does not correctly treat react's function components. See https://github.com/SonarSource/SonarJS/issues/2238
    // Max very high as most of the react code lives in functions.
    "max-lines": [
      "error",
      {
        "max": 500,
        "skipComments": true,
        "skipBlankLines": true
      }
    ],
    "max-lines-per-function": [
      "error",
      {
        "max": 500,
        "skipComments": true,
        "skipBlankLines": true
      }
    ],
    "no-alert": "error",
    "no-await-in-loop": "error",
    "no-console": [
      "warn",
      {
        "allow": [
          "error",
          "warn",
          "info"
        ]
      }
    ],
    "no-constructor-return": "error",
    "no-dupe-else-if": "error",
    "no-inner-declarations": "error",
    "no-lonely-if": "error",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1
      }
    ],
    "no-unneeded-ternary": "error",
    "no-warning-comments": [
      "warn",
      {
        "terms": [
          "TODO",
          "FIX",
          "XXX",
          "FIXME"
        ]
      }
    ],
    "operator-assignment": [
      "error",
      "always"
    ],
    "operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          "?": "before",
          ":": "before"
        }
      }
    ],
    "semi-style": "error",
    "space-in-parens": "error",
    "space-unary-ops": "error",
    "wrap-regex": "error",
    // [ES6] Custom rules and eslint:recommended overrides (https://eslint.org/docs/rules/#ecmascript-6)
    "arrow-body-style": "error",
    "arrow-parens": [
      "error",
      "as-needed"
    ],
    "arrow-spacing": "error",
    "generator-star-spacing": "error",
    "no-class-assign": "error",
    "no-useless-computed-key": "error",
    "no-useless-rename": "error",
    "object-shorthand": "error",
    "prefer-arrow-callback": "error",
    "prefer-numeric-literals": "error",
    "prefer-template": "error",
    "require-yield": "error",
    "rest-spread-spacing": "error",
    "sort-imports": "off",
    "symbol-description": "error",
    "template-curly-spacing": "error",
    "yield-star-spacing": "error"
  }
}
