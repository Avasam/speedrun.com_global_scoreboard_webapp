# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
[tool.black]
line-length = 120

# https://github.com/hhatto/autopep8#usage
# https://github.com/hhatto/autopep8#more-advanced-usage
[tool.autopep8]
max_line_length = 120
recursive = true
aggressive = 3

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
pythonPlatform = "Windows"
# TODO: Fix everything and set to strict
typeCheckingMode = "basic"
# Extra strict
reportPropertyTypeMismatch=true
reportUninitializedInstanceVariable=true
reportCallInDefaultInitializer=true
reportImplicitStringConcatenation=true
ignore = [
  "typings/",
]
reportMissingTypeStubs = "information"
# False positives with TYPE_CHECKING
reportImportCycles = "information"
# Extra runtime safety
reportUnnecessaryComparison = "warning"
# Flake8 does a better job
reportUnusedImport = "none"
# numpy has way too many complex types that triggers this
reportUnknownMemberType = "none"

# https://github.com/PyCQA/pylint/blob/main/examples/pylintrc
# https://pylint.pycqa.org/en/latest/technical_reference/features.html
[tool.pylint.REPORTS]
# Just like default but any error will make drop to 9 or less. warning and conventions are worth more
evaluation = "10.0 - error - ((float((warning + convention) * 10 + refactor ) / statement) * 10)"
[tool.pylint.MASTER]
fail-under = 9.0
# Needed for Pylint to discover our own modules
init-hook = "from pylint.config import find_pylintrc; import os, sys; sys.path.append(os.path.join(os.path.dirname(find_pylintrc()), 'backend'))"
# https://pylint.pycqa.org/en/latest/technical_reference/extensions.html
load-plugins = [
  "pylint.extensions.emptystring",
  "pylint.extensions.confusing_elif",
  "pylint.extensions.consider_ternary_expression",
  "pylint.extensions.bad_builtin",
  "pylint.extensions.mccabe",
  "pylint.extensions.check_elif",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.empty_comment",
  "pylint.extensions.set_membership",
  "pylint.extensions.typing",
  # External plugins
  "pylint_flask",
  "pylint_flask_sqlalchemy",
  # TODO: Maybe later
  # "pylint.extensions.docparams",
  # Not wanted/needed
  # "pylint.extensions.broad_try_clause",
  # "pylint.extensions.code_style",
  # "pylint.extensions.comparetozero",
  # "pylint.extensions.docstyle",
  # "pylint.extensions.while_used",
  # Didn't work
  # "pylint.extensions.comparison_placement",
  # "pylint.extensions.for_any_all",
]
ignore-paths = [
  # We expect stub files to be incomplete or contain useless statements
  "^.*\\.pyi$",
]
# Dynamic/Generated members from SQLAlchemy
ignored-classes = ["scoped_session"]
disable = [
  # No need to mention the fixmes
  "fixme",
  # Strings are ok. Pylance also doesn't seem to see our overriden Exception classes
  "invalid-sequence-index",
]

[tool.pylint.DESIGN]
# Same as SonarLint
max-args = 7
# Arbitrary to 2 bytes
max-attributes = 16
max-locals = 16

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.'MESSAGES CONTROL']
# Same as SonarLint
max-complexity = 15
max-branches = 15
# https://pylint.pycqa.org/en/latest/user_guide/options.html#naming-styles
module-naming-style = "any"
# Can't make private class with PascalCase
class-rgx = "_?_?[a-zA-Z]+?$"
# https://github.com/PyCQA/pylint/issues/2018
good-names = ["x", "y", "a0", "i", "t0", "t1", "fn", "pb", "wr"]
disable = [
  "missing-docstring",
  # We group imports
  "wrong-import-position",
  # Already taken care of and grayed out. Also conflicts with Pylance reportIncompatibleMethodOverride
  "unused-argument",
  # Already taken care of by Flake8
  "unused-import",
  # TODO: Diabled until using *proper* class based logic
  "protected-access",
]
